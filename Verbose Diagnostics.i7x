Version 1 of Verbose Diagnostics (for Glulx only) by Brady Garvin begins here.

"Additional detail in the messages for runtime problems, programming errors, block value errors, and so on."

"with the support for block value errors courtesy of Esteban Montecristo"

Include Verbose Diagnostics Lite by Brady Garvin.
Include Debug File Parsing by Brady Garvin.
Include Printing according to Kind Names by Brady Garvin.

Use authorial modesty.

Book "Copyright and License"

[Copyright 2012 Brady J. Garvin]

[This extension is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

This extension is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with this extension.  If not, see <http://www.gnu.org/licenses/>.]

Verbose Diagnostics ends here.

---- DOCUMENTATION ----

Chapter: Synopsis

Verbose Diagnostics is a behind-the-scenes extension.  We include it and set up
symbolic links for Debug File Parsing, and when the story reports a runtime
problem, it will also print a call stack like

	*** Run-time problem P1: Tried to move the chorus (a backdrop) to the stage, which is not a region.
	within instead of singing (at address 89493),
	within the instead stage rule (at address 88166),
	within the generate action rule (at address 70026),
	within the main story routine (at address 69439).

to tell us where in the story the failure was detected.  Reports for programming
errors and block value errors and many other I6-level runtime problems are
similarly improved.

Details are in the following chapters.

Chapter: Usage

When Verbose Diagnostics is included, all of the known problem messages for
runtime trouble, both at the I7 and the I6 level, are accompanied by a call
stack.  These call stacks are printed using phrases from the extension Call
Stack Tracking (which see), and we can customize them by changing the truth
states from Call Stack Tracking in a GRIF setup rule.  For example,

	*: A GRIF setup rule:
		now the call stack simplification flag is false.

The available flags are:

	Table of Call Stack Flags
	Flag	Default Value	Meaning
	the original arguments flag	false	whether functions' original arguments are shown
	the temporary named values flag	false	whether functions' temporary named values are shown
	the catch tokens flag	false	whether catch tokens generated by functions are shown
	the call stack simplification flag	true	whether internal routines are hidden
	the call frame numbering flag	false	whether call frames are numbered
	the terse call stack numbers flag	false	whether call frame numbers are shown without the text that explains that they are call frame numbers
	the call stack addresses flag	true	whether function addresses are shown

If the extension Interactive Debugger is also included, Verbose Diagnostics
forgoes the call stack and instead forces a breakpoint.  We can then use all of
the debugger's facilities to diagnose the problem, including the debug command
"examine the call stack".

Chapter: Requirements, Limitations, and Bugs

This version was tested with Inform 6G60.  It will probably function on newer
versions, and it may function under slightly older versions, though there is no
guarantee.

Verbose Diagnostics is subject to the caveats for the Glulx Runtime
Instrumentation Framework; see the requirements chapter in its documentation for
the technical details.

Section: Regarding bugs

If you encounter a bug, check first on the project website
(https://sourceforge.net/projects/i7grip/) to see whether a newer version of
this extension is available.  If, even using the latest version, the fault
remains, please file a bug report: On the website, choose "Support" from the
toolbar and follow the link in the box titled "Best Way to Get Help".

I will try to respond quickly, at least with an estimate of when the bug might
be fixed, though sometimes I am away from the internet for a week or two at a
time.

Chapter: Acknowledgements

Verbose Diagnostics was prepared as part of the Glulx Runtime Instrumentation
Project (https://sourceforge.net/projects/i7grip/).  For this first edition of
the project, special thanks go to these people, in chronological order:

- Graham Nelson, Emily Short, and others, not only for Inform, but also for the
  countless hours the high-quality technical documentation saved me and for the
  work that made the Glulx VM possible,

- Andrew Plotkin for the Glulx VM and the Glk library, as well as their clear,
  always up-to-date specifications,

- Jacqueline Lott, David Welbourn, and all of the other attendees for Club
  Floyd, my first connection to the interactive fiction community,

- Jesse McGrew and Emily Short for getting me involved with Inform 7,

- all of the Inform 7 developers for their hard work, the ceaseless flow of
  improvements, and their willingness to take me on as a collaborator,

- Ron Newcomb and Esteban Montecristo for the idea to write Call Stack Tracking
  and Verbose Diagnostics,

- Roger Carbol, Jesse McGrew, Michael Martin, Dan Shiovitz, Johnny Rivera, and
  everyone else for their helpful comments on ifMUD's I6 and I7 channels,

- Esteban Montecristo, for invaluable alpha testing,

- and all of the beta testers who are reading this.

For Verbose Diagnostics in particular, I am grateful to Esteban Montecristo for
contributing the original code for block value errors.
